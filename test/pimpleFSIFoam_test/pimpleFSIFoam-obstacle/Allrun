#!/bin/sh

# Run from this directory
cd ${0%/*} || exit 1

domainFluid=${PWD}/runData/fluidDomain
domainStructure=${PWD}/runData/structureDomain

# Ranks set to each domain
numProcsFluid=3
numProcsStructure=1

# Source OpenFOAM run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Create and copy data to run folder
./runCtrl/runDataFolderCreation

# Get application name for structure domain
solverStructure=./PUSHER_FETCHER_1

cd ${domainStructure}

# Create build folder
mkdir build && cd build 

# Check if an argument was provided
cmake -DCMAKE_PREFIX_PATH=../../../../../../../../coupling/MUI ..

# Run make to build the executable
make 2>&1 | tee make.log && cd ..
cp build/PUSHER_FETCHER_1 ./
cd ../..

# Get application name for fluid domain
cd runData/fluidDomain
solverFluid=$(getApplication)
echo application is ${solverFluid}
cd ../../

# Pre-processing
./runCtrl/preProcess

echo -n "ParaSiF running..."

# ParaSiF case with OpenFOAM_MUI(C++)_MUI(python)_FEniCSx parallel run
mpirun -np ${numProcsFluid} -wdir ${domainFluid} ${solverFluid} -mpi-split-by-appnum -parallel :\
       -np ${numProcsStructure} -wdir ${domainStructure} ${solverStructure} \
       2>&1 | tee runData/logFiles/log.foamRun

echo "Done"

# Post-processing
./runCtrl/postProcess

# ----------------------------------------------------------------- end-of-file
